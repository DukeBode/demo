//
////引用：
////	为变量另起一个名，变量的引用通常被认为是变量的别名。
////	声明是必须同时用另一个变量的名字来将它初始化，即声明它代表哪一个变量，是那个变量的别名。
////格式：
////	类型 &引用名=已定义的变量名
////说明：
////	引用名可以使用任何合法的变量名。除了用作函数的参数或返回类型外，在声明引用时，必须立即对它进行初始化，不能声明以后再赋值。
////	为引用提供的初始值，可以是一个变量或另一个引用。
////	指针是通过地址间接访问某个变量，而引用是通过别名直接访问某个变量。
////	使用引用时，可以不用书写间接运算符“*”，因而使用引用可以简化程序。
////	引用在初始化后不能再被重新声明为另一个变量的引用。
////	不是任何类型的数据都可以引用：
////		不允许建立void类型的引用：void &r = 10；
////		不能建立引用的数组：int a[4]= "abcd"; //int &ra[4] = a;
////		不能建立引用的引用：int &&r = n；
////		不能建立指向引用的指针：int &*p = n；
////		可以将引用的地址赋给一个指针，此时指针指向的是原来的变量：int num = 50; //int &ref = num; //int  *p = ref; //p中保存的是变量num的地址
////		引用仅在声明时带有引用运算符“&”，以后就像普通变量一样使用，不能再带“&”。其它场合使用的“&”都是地址操作符。
//#include<iostream>
//using namespace std;
//int main()
//{
//	int i = 5;
//	int &j = i;
//	i = 30;
//	cout << "i=" << i << "j= " << j << endl;
//	j = 80;
//	cout << "i=" << i << "j=" << j << endl;
//	cout << "变量i的地址：" << &i << endl;
//	cout << "引用j的地址：" << &j << endl;
//	return 0;
//}
//
